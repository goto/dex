// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirehoseConfig firehose config
//
// swagger:model FirehoseConfig
type FirehoseConfig struct {

	// deployment id
	DeploymentID string `json:"deployment_id,omitempty"`

	// env vars
	// Required: true
	EnvVars map[string]string `json:"env_vars"`

	// image
	// Example: gotocompany/firehose:0.1.0
	Image string `json:"image,omitempty"`

	// kube cluster
	// Example: orn:entropy:kubernetes:sample_project:sample_name
	// Required: true
	KubeCluster *string `json:"kube_cluster"`

	// replicas
	// Minimum: 1
	Replicas float64 `json:"replicas,omitempty"`

	// stop time
	// Format: date-time
	StopTime *strfmt.DateTime `json:"stop_time,omitempty"`

	// stopped
	Stopped bool `json:"stopped,omitempty"`

	// stream name
	// Required: true
	StreamName *string `json:"stream_name"`
}

// Validate validates this firehose config
func (m *FirehoseConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvVars(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirehoseConfig) validateEnvVars(formats strfmt.Registry) error {

	if err := validate.Required("env_vars", "body", m.EnvVars); err != nil {
		return err
	}

	return nil
}

func (m *FirehoseConfig) validateKubeCluster(formats strfmt.Registry) error {

	if err := validate.Required("kube_cluster", "body", m.KubeCluster); err != nil {
		return err
	}

	return nil
}

func (m *FirehoseConfig) validateReplicas(formats strfmt.Registry) error {
	if swag.IsZero(m.Replicas) { // not required
		return nil
	}

	if err := validate.Minimum("replicas", "body", m.Replicas, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *FirehoseConfig) validateStopTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StopTime) { // not required
		return nil
	}

	if err := validate.FormatOf("stop_time", "body", "date-time", m.StopTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirehoseConfig) validateStreamName(formats strfmt.Registry) error {

	if err := validate.Required("stream_name", "body", m.StreamName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this firehose config based on context it is used
func (m *FirehoseConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FirehoseConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirehoseConfig) UnmarshalBinary(b []byte) error {
	var res FirehoseConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
