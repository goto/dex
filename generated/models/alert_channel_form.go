// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertChannelForm alert channel form
//
// swagger:model AlertChannelForm
type AlertChannelForm struct {

	// channel criticality
	// Required: true
	ChannelCriticality *ChannelCriticality `json:"channel_criticality"`

	// channel name
	// Example: test-channel-name
	ChannelName string `json:"channel_name,omitempty"`

	// channel type
	// Required: true
	ChannelType *AlertChannelType `json:"channel_type"`

	// pagerduty service key
	// Example: sjand91299asldkla
	PagerdutyServiceKey string `json:"pagerduty_service_key,omitempty"`
}

// Validate validates this alert channel form
func (m *AlertChannelForm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelCriticality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertChannelForm) validateChannelCriticality(formats strfmt.Registry) error {

	if err := validate.Required("channel_criticality", "body", m.ChannelCriticality); err != nil {
		return err
	}

	if err := validate.Required("channel_criticality", "body", m.ChannelCriticality); err != nil {
		return err
	}

	if m.ChannelCriticality != nil {
		if err := m.ChannelCriticality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_criticality")
			}
			return err
		}
	}

	return nil
}

func (m *AlertChannelForm) validateChannelType(formats strfmt.Registry) error {

	if err := validate.Required("channel_type", "body", m.ChannelType); err != nil {
		return err
	}

	if err := validate.Required("channel_type", "body", m.ChannelType); err != nil {
		return err
	}

	if m.ChannelType != nil {
		if err := m.ChannelType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert channel form based on the context it is used
func (m *AlertChannelForm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelCriticality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannelType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertChannelForm) contextValidateChannelCriticality(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelCriticality != nil {
		if err := m.ChannelCriticality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_criticality")
			}
			return err
		}
	}

	return nil
}

func (m *AlertChannelForm) contextValidateChannelType(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelType != nil {
		if err := m.ChannelType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertChannelForm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertChannelForm) UnmarshalBinary(b []byte) error {
	var res AlertChannelForm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
