// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertChannel alert channel
//
// swagger:model AlertChannel
type AlertChannel struct {

	// channel criticality
	ChannelCriticality *ChannelCriticality `json:"channel_criticality,omitempty"`

	// channel name
	// Example: test-channel-name
	ChannelName string `json:"channel_name,omitempty"`

	// channel type
	ChannelType *AlertChannelType `json:"channel_type,omitempty"`

	// pagerduty service key
	// Example: sjand91299asldkla
	PagerdutyServiceKey string `json:"pagerduty_service_key,omitempty"`

	// receiver id
	// Example: 47
	// Read Only: true
	ReceiverID string `json:"receiver_id,omitempty"`

	// receiver name
	// Example: pilot-team-de-slack-warning
	// Read Only: true
	ReceiverName string `json:"receiver_name,omitempty"`
}

// Validate validates this alert channel
func (m *AlertChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelCriticality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertChannel) validateChannelCriticality(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelCriticality) { // not required
		return nil
	}

	if m.ChannelCriticality != nil {
		if err := m.ChannelCriticality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_criticality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel_criticality")
			}
			return err
		}
	}

	return nil
}

func (m *AlertChannel) validateChannelType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelType) { // not required
		return nil
	}

	if m.ChannelType != nil {
		if err := m.ChannelType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert channel based on the context it is used
func (m *AlertChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelCriticality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannelType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiverID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiverName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertChannel) contextValidateChannelCriticality(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelCriticality != nil {

		if swag.IsZero(m.ChannelCriticality) { // not required
			return nil
		}

		if err := m.ChannelCriticality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_criticality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel_criticality")
			}
			return err
		}
	}

	return nil
}

func (m *AlertChannel) contextValidateChannelType(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelType != nil {

		if swag.IsZero(m.ChannelType) { // not required
			return nil
		}

		if err := m.ChannelType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel_type")
			}
			return err
		}
	}

	return nil
}

func (m *AlertChannel) contextValidateReceiverID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "receiver_id", "body", string(m.ReceiverID)); err != nil {
		return err
	}

	return nil
}

func (m *AlertChannel) contextValidateReceiverName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "receiver_name", "body", string(m.ReceiverName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertChannel) UnmarshalBinary(b []byte) error {
	var res AlertChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
