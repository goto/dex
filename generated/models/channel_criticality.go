// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChannelCriticality channel criticality
//
// swagger:model ChannelCriticality
type ChannelCriticality string

func NewChannelCriticality(value ChannelCriticality) *ChannelCriticality {
	v := value
	return &v
}

const (

	// ChannelCriticalityINFO captures enum value "INFO"
	ChannelCriticalityINFO ChannelCriticality = "INFO"

	// ChannelCriticalityWARNING captures enum value "WARNING"
	ChannelCriticalityWARNING ChannelCriticality = "WARNING"

	// ChannelCriticalityCRITICAL captures enum value "CRITICAL"
	ChannelCriticalityCRITICAL ChannelCriticality = "CRITICAL"
)

// for schema
var channelCriticalityEnum []interface{}

func init() {
	var res []ChannelCriticality
	if err := json.Unmarshal([]byte(`["INFO","WARNING","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelCriticalityEnum = append(channelCriticalityEnum, v)
	}
}

func (m ChannelCriticality) validateChannelCriticalityEnum(path, location string, value ChannelCriticality) error {
	if err := validate.EnumCase(path, location, value, channelCriticalityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this channel criticality
func (m ChannelCriticality) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChannelCriticalityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this channel criticality based on context it is used
func (m ChannelCriticality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
