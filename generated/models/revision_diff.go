// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RevisionDiff revision diff
//
// swagger:model RevisionDiff
type RevisionDiff struct {

	// diff
	// Example: {"configs":{"replicas":[3,2]},"labels":{"title":["old-title","new-title"]}}
	Diff interface{} `json:"diff,omitempty"`

	// reason
	// Enum: [action:create action:update action:reset action:start action:stop action:upgrade]
	Reason string `json:"reason,omitempty"`

	// updated at
	// Example: 2022-06-23T16:49:15.885541Z
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// updated by
	// Example: john.doe@example.com
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this revision diff
func (m *RevisionDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var revisionDiffTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["action:create","action:update","action:reset","action:start","action:stop","action:upgrade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		revisionDiffTypeReasonPropEnum = append(revisionDiffTypeReasonPropEnum, v)
	}
}

const (

	// RevisionDiffReasonActionCreate captures enum value "action:create"
	RevisionDiffReasonActionCreate string = "action:create"

	// RevisionDiffReasonActionUpdate captures enum value "action:update"
	RevisionDiffReasonActionUpdate string = "action:update"

	// RevisionDiffReasonActionReset captures enum value "action:reset"
	RevisionDiffReasonActionReset string = "action:reset"

	// RevisionDiffReasonActionStart captures enum value "action:start"
	RevisionDiffReasonActionStart string = "action:start"

	// RevisionDiffReasonActionStop captures enum value "action:stop"
	RevisionDiffReasonActionStop string = "action:stop"

	// RevisionDiffReasonActionUpgrade captures enum value "action:upgrade"
	RevisionDiffReasonActionUpgrade string = "action:upgrade"
)

// prop value enum
func (m *RevisionDiff) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, revisionDiffTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RevisionDiff) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *RevisionDiff) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this revision diff based on the context it is used
func (m *RevisionDiff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RevisionDiff) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RevisionDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RevisionDiff) UnmarshalBinary(b []byte) error {
	var res RevisionDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
