// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirehoseUpdateRequest firehose update request
//
// swagger:model FirehoseUpdateRequest
type FirehoseUpdateRequest struct {

	// configs
	Configs *FirehoseConfig `json:"configs,omitempty"`

	// description
	// Example: This firehose consumes from booking events and ingests to redis
	Description string `json:"description,omitempty"`

	// group
	// Example: e144ea5e-c7d6-48c4-a580-db31cb3389aa
	// Required: true
	// Format: uuid
	Group *strfmt.UUID `json:"group"`
}

// Validate validates this firehose update request
func (m *FirehoseUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirehoseUpdateRequest) validateConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.Configs) { // not required
		return nil
	}

	if m.Configs != nil {
		if err := m.Configs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configs")
			}
			return err
		}
	}

	return nil
}

func (m *FirehoseUpdateRequest) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	if err := validate.FormatOf("group", "body", "uuid", m.Group.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this firehose update request based on the context it is used
func (m *FirehoseUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirehoseUpdateRequest) contextValidateConfigs(ctx context.Context, formats strfmt.Registry) error {

	if m.Configs != nil {

		if swag.IsZero(m.Configs) { // not required
			return nil
		}

		if err := m.Configs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirehoseUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirehoseUpdateRequest) UnmarshalBinary(b []byte) error {
	var res FirehoseUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
