// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DlqJobForm dlq job form
//
// swagger:model DlqJobForm
type DlqJobForm struct {

	// batch size
	// Required: true
	BatchSize *int64 `json:"batch_size"`

	// date
	// Example: 2012-10-30
	// Required: true
	// Min Length: 1
	Date *string `json:"date"`

	// List of firehose error types, comma separated
	ErrorTypes string `json:"error_types,omitempty"`

	// num threads
	// Required: true
	NumThreads *int64 `json:"num_threads"`

	// resource id
	// Required: true
	// Min Length: 1
	ResourceID *string `json:"resource_id"`

	// resource type
	// Required: true
	// Enum: [firehose]
	ResourceType *string `json:"resource_type"`

	// topic
	// Required: true
	// Min Length: 1
	Topic *string `json:"topic"`
}

// Validate validates this dlq job form
func (m *DlqJobForm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumThreads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DlqJobForm) validateBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("batch_size", "body", m.BatchSize); err != nil {
		return err
	}

	return nil
}

func (m *DlqJobForm) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.MinLength("date", "body", *m.Date, 1); err != nil {
		return err
	}

	return nil
}

func (m *DlqJobForm) validateNumThreads(formats strfmt.Registry) error {

	if err := validate.Required("num_threads", "body", m.NumThreads); err != nil {
		return err
	}

	return nil
}

func (m *DlqJobForm) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resource_id", "body", m.ResourceID); err != nil {
		return err
	}

	if err := validate.MinLength("resource_id", "body", *m.ResourceID, 1); err != nil {
		return err
	}

	return nil
}

var dlqJobFormTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["firehose"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dlqJobFormTypeResourceTypePropEnum = append(dlqJobFormTypeResourceTypePropEnum, v)
	}
}

const (

	// DlqJobFormResourceTypeFirehose captures enum value "firehose"
	DlqJobFormResourceTypeFirehose string = "firehose"
)

// prop value enum
func (m *DlqJobForm) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dlqJobFormTypeResourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DlqJobForm) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceTypeEnum("resource_type", "body", *m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *DlqJobForm) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("topic", "body", m.Topic); err != nil {
		return err
	}

	if err := validate.MinLength("topic", "body", *m.Topic, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dlq job form based on context it is used
func (m *DlqJobForm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DlqJobForm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DlqJobForm) UnmarshalBinary(b []byte) error {
	var res DlqJobForm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
