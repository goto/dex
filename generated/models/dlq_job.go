// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DlqJob dlq job
//
// swagger:model DlqJob
type DlqJob struct {

	// batch size
	BatchSize int64 `json:"batch_size,omitempty"`

	// blob batch
	BlobBatch int64 `json:"blob_batch,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// date
	// Example: 2012-10-30
	Date string `json:"date,omitempty"`

	// List of firehose error types, comma separated
	ErrorTypes string `json:"error_types,omitempty"`

	// num threads
	NumThreads int64 `json:"num_threads,omitempty"`

	// Shield's project slug
	Project string `json:"project,omitempty"`

	// replicas
	Replicas int64 `json:"replicas,omitempty"`

	// resource id
	ResourceID string `json:"resource_id,omitempty"`

	// resource type
	// Enum: [firehose]
	ResourceType string `json:"resource_type,omitempty"`

	// status
	// Enum: [pending error running stopped]
	Status string `json:"status,omitempty"`

	// stopped
	Stopped bool `json:"stopped,omitempty"`

	// topic
	Topic string `json:"topic,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`

	// urn
	Urn string `json:"urn,omitempty"`
}

// Validate validates this dlq job
func (m *DlqJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DlqJob) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var dlqJobTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["firehose"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dlqJobTypeResourceTypePropEnum = append(dlqJobTypeResourceTypePropEnum, v)
	}
}

const (

	// DlqJobResourceTypeFirehose captures enum value "firehose"
	DlqJobResourceTypeFirehose string = "firehose"
)

// prop value enum
func (m *DlqJob) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dlqJobTypeResourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DlqJob) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeEnum("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

var dlqJobTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","error","running","stopped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dlqJobTypeStatusPropEnum = append(dlqJobTypeStatusPropEnum, v)
	}
}

const (

	// DlqJobStatusPending captures enum value "pending"
	DlqJobStatusPending string = "pending"

	// DlqJobStatusError captures enum value "error"
	DlqJobStatusError string = "error"

	// DlqJobStatusRunning captures enum value "running"
	DlqJobStatusRunning string = "running"

	// DlqJobStatusStopped captures enum value "stopped"
	DlqJobStatusStopped string = "stopped"
)

// prop value enum
func (m *DlqJob) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dlqJobTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DlqJob) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DlqJob) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dlq job based on context it is used
func (m *DlqJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DlqJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DlqJob) UnmarshalBinary(b []byte) error {
	var res DlqJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
