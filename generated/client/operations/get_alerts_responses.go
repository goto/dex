// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goto/dex/generated/models"
)

// GetAlertsReader is a Reader for the GetAlerts structure.
type GetAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAlertsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAlertsOK creates a GetAlertsOK with default headers values
func NewGetAlertsOK() *GetAlertsOK {
	return &GetAlertsOK{}
}

/*
	GetAlertsOK describes a response with status code 200, with default header values.

alerts for given firehose URN.
*/
type GetAlertsOK struct {
	Payload *models.AlertArray
}

func (o *GetAlertsOK) Error() string {
	return fmt.Sprintf("[GET /dex/alerts/{projectSlug}/{resourceUrn}][%d] getAlertsOK  %+v", 200, o.Payload)
}
func (o *GetAlertsOK) GetPayload() *models.AlertArray {
	return o.Payload
}

func (o *GetAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AlertArray)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertsNotFound creates a GetAlertsNotFound with default headers values
func NewGetAlertsNotFound() *GetAlertsNotFound {
	return &GetAlertsNotFound{}
}

/*
	GetAlertsNotFound describes a response with status code 404, with default header values.

Could not find alerts for given URN
*/
type GetAlertsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetAlertsNotFound) Error() string {
	return fmt.Sprintf("[GET /dex/alerts/{projectSlug}/{resourceUrn}][%d] getAlertsNotFound  %+v", 404, o.Payload)
}
func (o *GetAlertsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAlertsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertsInternalServerError creates a GetAlertsInternalServerError with default headers values
func NewGetAlertsInternalServerError() *GetAlertsInternalServerError {
	return &GetAlertsInternalServerError{}
}

/*
	GetAlertsInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type GetAlertsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetAlertsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dex/alerts/{projectSlug}/{resourceUrn}][%d] getAlertsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAlertsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
