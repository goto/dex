// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goto/dex/generated/models"
)

// GetAlertSubscriptionReader is a Reader for the GetAlertSubscription structure.
type GetAlertSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAlertSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAlertSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAlertSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAlertSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAlertSubscriptionOK creates a GetAlertSubscriptionOK with default headers values
func NewGetAlertSubscriptionOK() *GetAlertSubscriptionOK {
	return &GetAlertSubscriptionOK{}
}

/*
	GetAlertSubscriptionOK describes a response with status code 200, with default header values.

Successful Operation.
*/
type GetAlertSubscriptionOK struct {
	Payload *GetAlertSubscriptionOKBody
}

func (o *GetAlertSubscriptionOK) Error() string {
	return fmt.Sprintf("[GET /dex/subscriptions/{id}][%d] getAlertSubscriptionOK  %+v", 200, o.Payload)
}
func (o *GetAlertSubscriptionOK) GetPayload() *GetAlertSubscriptionOKBody {
	return o.Payload
}

func (o *GetAlertSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAlertSubscriptionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertSubscriptionNotFound creates a GetAlertSubscriptionNotFound with default headers values
func NewGetAlertSubscriptionNotFound() *GetAlertSubscriptionNotFound {
	return &GetAlertSubscriptionNotFound{}
}

/*
	GetAlertSubscriptionNotFound describes a response with status code 404, with default header values.

Not Found Error
*/
type GetAlertSubscriptionNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetAlertSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[GET /dex/subscriptions/{id}][%d] getAlertSubscriptionNotFound  %+v", 404, o.Payload)
}
func (o *GetAlertSubscriptionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAlertSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertSubscriptionInternalServerError creates a GetAlertSubscriptionInternalServerError with default headers values
func NewGetAlertSubscriptionInternalServerError() *GetAlertSubscriptionInternalServerError {
	return &GetAlertSubscriptionInternalServerError{}
}

/*
	GetAlertSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal Error
*/
type GetAlertSubscriptionInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetAlertSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dex/subscriptions/{id}][%d] getAlertSubscriptionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAlertSubscriptionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAlertSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAlertSubscriptionOKBody get alert subscription o k body
swagger:model GetAlertSubscriptionOKBody
*/
type GetAlertSubscriptionOKBody struct {

	// subscription
	Subscription *models.Subscription `json:"subscription,omitempty"`
}

// Validate validates this get alert subscription o k body
func (o *GetAlertSubscriptionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAlertSubscriptionOKBody) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(o.Subscription) { // not required
		return nil
	}

	if o.Subscription != nil {
		if err := o.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAlertSubscriptionOK" + "." + "subscription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get alert subscription o k body based on the context it is used
func (o *GetAlertSubscriptionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAlertSubscriptionOKBody) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if o.Subscription != nil {
		if err := o.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAlertSubscriptionOK" + "." + "subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAlertSubscriptionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAlertSubscriptionOKBody) UnmarshalBinary(b []byte) error {
	var res GetAlertSubscriptionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
