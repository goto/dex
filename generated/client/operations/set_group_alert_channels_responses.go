// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/goto/dex/generated/models"
)

// SetGroupAlertChannelsReader is a Reader for the SetGroupAlertChannels structure.
type SetGroupAlertChannelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetGroupAlertChannelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetGroupAlertChannelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewSetGroupAlertChannelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetGroupAlertChannelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /dex/subscriptions/groups/{id}/alert_channels] setGroupAlertChannels", response, response.Code())
	}
}

// NewSetGroupAlertChannelsOK creates a SetGroupAlertChannelsOK with default headers values
func NewSetGroupAlertChannelsOK() *SetGroupAlertChannelsOK {
	return &SetGroupAlertChannelsOK{}
}

/*
SetGroupAlertChannelsOK describes a response with status code 200, with default header values.

Successful Operation.
*/
type SetGroupAlertChannelsOK struct {
	Payload *SetGroupAlertChannelsOKBody
}

// IsSuccess returns true when this set group alert channels o k response has a 2xx status code
func (o *SetGroupAlertChannelsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set group alert channels o k response has a 3xx status code
func (o *SetGroupAlertChannelsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set group alert channels o k response has a 4xx status code
func (o *SetGroupAlertChannelsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set group alert channels o k response has a 5xx status code
func (o *SetGroupAlertChannelsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set group alert channels o k response a status code equal to that given
func (o *SetGroupAlertChannelsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set group alert channels o k response
func (o *SetGroupAlertChannelsOK) Code() int {
	return 200
}

func (o *SetGroupAlertChannelsOK) Error() string {
	return fmt.Sprintf("[PUT /dex/subscriptions/groups/{id}/alert_channels][%d] setGroupAlertChannelsOK  %+v", 200, o.Payload)
}

func (o *SetGroupAlertChannelsOK) String() string {
	return fmt.Sprintf("[PUT /dex/subscriptions/groups/{id}/alert_channels][%d] setGroupAlertChannelsOK  %+v", 200, o.Payload)
}

func (o *SetGroupAlertChannelsOK) GetPayload() *SetGroupAlertChannelsOKBody {
	return o.Payload
}

func (o *SetGroupAlertChannelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetGroupAlertChannelsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetGroupAlertChannelsNotFound creates a SetGroupAlertChannelsNotFound with default headers values
func NewSetGroupAlertChannelsNotFound() *SetGroupAlertChannelsNotFound {
	return &SetGroupAlertChannelsNotFound{}
}

/*
SetGroupAlertChannelsNotFound describes a response with status code 404, with default header values.

Group Not Found Error
*/
type SetGroupAlertChannelsNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this set group alert channels not found response has a 2xx status code
func (o *SetGroupAlertChannelsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set group alert channels not found response has a 3xx status code
func (o *SetGroupAlertChannelsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set group alert channels not found response has a 4xx status code
func (o *SetGroupAlertChannelsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set group alert channels not found response has a 5xx status code
func (o *SetGroupAlertChannelsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set group alert channels not found response a status code equal to that given
func (o *SetGroupAlertChannelsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set group alert channels not found response
func (o *SetGroupAlertChannelsNotFound) Code() int {
	return 404
}

func (o *SetGroupAlertChannelsNotFound) Error() string {
	return fmt.Sprintf("[PUT /dex/subscriptions/groups/{id}/alert_channels][%d] setGroupAlertChannelsNotFound  %+v", 404, o.Payload)
}

func (o *SetGroupAlertChannelsNotFound) String() string {
	return fmt.Sprintf("[PUT /dex/subscriptions/groups/{id}/alert_channels][%d] setGroupAlertChannelsNotFound  %+v", 404, o.Payload)
}

func (o *SetGroupAlertChannelsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SetGroupAlertChannelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetGroupAlertChannelsInternalServerError creates a SetGroupAlertChannelsInternalServerError with default headers values
func NewSetGroupAlertChannelsInternalServerError() *SetGroupAlertChannelsInternalServerError {
	return &SetGroupAlertChannelsInternalServerError{}
}

/*
SetGroupAlertChannelsInternalServerError describes a response with status code 500, with default header values.

Internal Error
*/
type SetGroupAlertChannelsInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this set group alert channels internal server error response has a 2xx status code
func (o *SetGroupAlertChannelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set group alert channels internal server error response has a 3xx status code
func (o *SetGroupAlertChannelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set group alert channels internal server error response has a 4xx status code
func (o *SetGroupAlertChannelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set group alert channels internal server error response has a 5xx status code
func (o *SetGroupAlertChannelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set group alert channels internal server error response a status code equal to that given
func (o *SetGroupAlertChannelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set group alert channels internal server error response
func (o *SetGroupAlertChannelsInternalServerError) Code() int {
	return 500
}

func (o *SetGroupAlertChannelsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dex/subscriptions/groups/{id}/alert_channels][%d] setGroupAlertChannelsInternalServerError  %+v", 500, o.Payload)
}

func (o *SetGroupAlertChannelsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /dex/subscriptions/groups/{id}/alert_channels][%d] setGroupAlertChannelsInternalServerError  %+v", 500, o.Payload)
}

func (o *SetGroupAlertChannelsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SetGroupAlertChannelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SetGroupAlertChannelsBody set group alert channels body
swagger:model SetGroupAlertChannelsBody
*/
type SetGroupAlertChannelsBody struct {

	// alert channels
	// Required: true
	// Min Items: 1
	AlertChannels []*models.AlertChannelForm `json:"alert_channels"`
}

// Validate validates this set group alert channels body
func (o *SetGroupAlertChannelsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlertChannels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetGroupAlertChannelsBody) validateAlertChannels(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"alert_channels", "body", o.AlertChannels); err != nil {
		return err
	}

	iAlertChannelsSize := int64(len(o.AlertChannels))

	if err := validate.MinItems("body"+"."+"alert_channels", "body", iAlertChannelsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(o.AlertChannels); i++ {
		if swag.IsZero(o.AlertChannels[i]) { // not required
			continue
		}

		if o.AlertChannels[i] != nil {
			if err := o.AlertChannels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "alert_channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "alert_channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this set group alert channels body based on the context it is used
func (o *SetGroupAlertChannelsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAlertChannels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetGroupAlertChannelsBody) contextValidateAlertChannels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AlertChannels); i++ {

		if o.AlertChannels[i] != nil {

			if swag.IsZero(o.AlertChannels[i]) { // not required
				return nil
			}

			if err := o.AlertChannels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "alert_channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "alert_channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetGroupAlertChannelsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetGroupAlertChannelsBody) UnmarshalBinary(b []byte) error {
	var res SetGroupAlertChannelsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SetGroupAlertChannelsOKBody set group alert channels o k body
swagger:model SetGroupAlertChannelsOKBody
*/
type SetGroupAlertChannelsOKBody struct {

	// alert channels
	AlertChannels []*models.AlertChannel `json:"alert_channels"`
}

// Validate validates this set group alert channels o k body
func (o *SetGroupAlertChannelsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlertChannels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetGroupAlertChannelsOKBody) validateAlertChannels(formats strfmt.Registry) error {
	if swag.IsZero(o.AlertChannels) { // not required
		return nil
	}

	for i := 0; i < len(o.AlertChannels); i++ {
		if swag.IsZero(o.AlertChannels[i]) { // not required
			continue
		}

		if o.AlertChannels[i] != nil {
			if err := o.AlertChannels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("setGroupAlertChannelsOK" + "." + "alert_channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("setGroupAlertChannelsOK" + "." + "alert_channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this set group alert channels o k body based on the context it is used
func (o *SetGroupAlertChannelsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAlertChannels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetGroupAlertChannelsOKBody) contextValidateAlertChannels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AlertChannels); i++ {

		if o.AlertChannels[i] != nil {

			if swag.IsZero(o.AlertChannels[i]) { // not required
				return nil
			}

			if err := o.AlertChannels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("setGroupAlertChannelsOK" + "." + "alert_channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("setGroupAlertChannelsOK" + "." + "alert_channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetGroupAlertChannelsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetGroupAlertChannelsOKBody) UnmarshalBinary(b []byte) error {
	var res SetGroupAlertChannelsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
