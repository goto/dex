// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goto/dex/generated/models"
)

// GetSubscriptionListReader is a Reader for the GetSubscriptionList structure.
type GetSubscriptionListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSubscriptionListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSubscriptionListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /dex/subscriptions] getSubscriptionList", response, response.Code())
	}
}

// NewGetSubscriptionListOK creates a GetSubscriptionListOK with default headers values
func NewGetSubscriptionListOK() *GetSubscriptionListOK {
	return &GetSubscriptionListOK{}
}

/*
GetSubscriptionListOK describes a response with status code 200, with default header values.

Successful Operation.
*/
type GetSubscriptionListOK struct {
	Payload *GetSubscriptionListOKBody
}

// IsSuccess returns true when this get subscription list o k response has a 2xx status code
func (o *GetSubscriptionListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get subscription list o k response has a 3xx status code
func (o *GetSubscriptionListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription list o k response has a 4xx status code
func (o *GetSubscriptionListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription list o k response has a 5xx status code
func (o *GetSubscriptionListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription list o k response a status code equal to that given
func (o *GetSubscriptionListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get subscription list o k response
func (o *GetSubscriptionListOK) Code() int {
	return 200
}

func (o *GetSubscriptionListOK) Error() string {
	return fmt.Sprintf("[GET /dex/subscriptions][%d] getSubscriptionListOK  %+v", 200, o.Payload)
}

func (o *GetSubscriptionListOK) String() string {
	return fmt.Sprintf("[GET /dex/subscriptions][%d] getSubscriptionListOK  %+v", 200, o.Payload)
}

func (o *GetSubscriptionListOK) GetPayload() *GetSubscriptionListOKBody {
	return o.Payload
}

func (o *GetSubscriptionListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionListBadRequest creates a GetSubscriptionListBadRequest with default headers values
func NewGetSubscriptionListBadRequest() *GetSubscriptionListBadRequest {
	return &GetSubscriptionListBadRequest{}
}

/*
GetSubscriptionListBadRequest describes a response with status code 400, with default header values.

Validation Error
*/
type GetSubscriptionListBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get subscription list bad request response has a 2xx status code
func (o *GetSubscriptionListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription list bad request response has a 3xx status code
func (o *GetSubscriptionListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription list bad request response has a 4xx status code
func (o *GetSubscriptionListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription list bad request response has a 5xx status code
func (o *GetSubscriptionListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription list bad request response a status code equal to that given
func (o *GetSubscriptionListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get subscription list bad request response
func (o *GetSubscriptionListBadRequest) Code() int {
	return 400
}

func (o *GetSubscriptionListBadRequest) Error() string {
	return fmt.Sprintf("[GET /dex/subscriptions][%d] getSubscriptionListBadRequest  %+v", 400, o.Payload)
}

func (o *GetSubscriptionListBadRequest) String() string {
	return fmt.Sprintf("[GET /dex/subscriptions][%d] getSubscriptionListBadRequest  %+v", 400, o.Payload)
}

func (o *GetSubscriptionListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSubscriptionListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionListInternalServerError creates a GetSubscriptionListInternalServerError with default headers values
func NewGetSubscriptionListInternalServerError() *GetSubscriptionListInternalServerError {
	return &GetSubscriptionListInternalServerError{}
}

/*
GetSubscriptionListInternalServerError describes a response with status code 500, with default header values.

Internal Error
*/
type GetSubscriptionListInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get subscription list internal server error response has a 2xx status code
func (o *GetSubscriptionListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription list internal server error response has a 3xx status code
func (o *GetSubscriptionListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription list internal server error response has a 4xx status code
func (o *GetSubscriptionListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription list internal server error response has a 5xx status code
func (o *GetSubscriptionListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get subscription list internal server error response a status code equal to that given
func (o *GetSubscriptionListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get subscription list internal server error response
func (o *GetSubscriptionListInternalServerError) Code() int {
	return 500
}

func (o *GetSubscriptionListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dex/subscriptions][%d] getSubscriptionListInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubscriptionListInternalServerError) String() string {
	return fmt.Sprintf("[GET /dex/subscriptions][%d] getSubscriptionListInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubscriptionListInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSubscriptionListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetSubscriptionListOKBody get subscription list o k body
swagger:model GetSubscriptionListOKBody
*/
type GetSubscriptionListOKBody struct {

	// subscriptions
	Subscriptions []*models.Subscription `json:"subscriptions"`
}

// Validate validates this get subscription list o k body
func (o *GetSubscriptionListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionListOKBody) validateSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(o.Subscriptions); i++ {
		if swag.IsZero(o.Subscriptions[i]) { // not required
			continue
		}

		if o.Subscriptions[i] != nil {
			if err := o.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSubscriptionListOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSubscriptionListOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get subscription list o k body based on the context it is used
func (o *GetSubscriptionListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionListOKBody) contextValidateSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Subscriptions); i++ {

		if o.Subscriptions[i] != nil {

			if swag.IsZero(o.Subscriptions[i]) { // not required
				return nil
			}

			if err := o.Subscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSubscriptionListOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSubscriptionListOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionListOKBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
