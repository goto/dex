// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goto/dex/generated/models"
)

// NewAlertSubscriptionReader is a Reader for the NewAlertSubscription structure.
type NewAlertSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NewAlertSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewNewAlertSubscriptionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNewAlertSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewNewAlertSubscriptionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewNewAlertSubscriptionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNewAlertSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /dex/subscriptions] newAlertSubscription", response, response.Code())
	}
}

// NewNewAlertSubscriptionCreated creates a NewAlertSubscriptionCreated with default headers values
func NewNewAlertSubscriptionCreated() *NewAlertSubscriptionCreated {
	return &NewAlertSubscriptionCreated{}
}

/*
NewAlertSubscriptionCreated describes a response with status code 201, with default header values.

Successful Operation.
*/
type NewAlertSubscriptionCreated struct {
	Payload *NewAlertSubscriptionCreatedBody
}

// IsSuccess returns true when this new alert subscription created response has a 2xx status code
func (o *NewAlertSubscriptionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this new alert subscription created response has a 3xx status code
func (o *NewAlertSubscriptionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this new alert subscription created response has a 4xx status code
func (o *NewAlertSubscriptionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this new alert subscription created response has a 5xx status code
func (o *NewAlertSubscriptionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this new alert subscription created response a status code equal to that given
func (o *NewAlertSubscriptionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the new alert subscription created response
func (o *NewAlertSubscriptionCreated) Code() int {
	return 201
}

func (o *NewAlertSubscriptionCreated) Error() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionCreated  %+v", 201, o.Payload)
}

func (o *NewAlertSubscriptionCreated) String() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionCreated  %+v", 201, o.Payload)
}

func (o *NewAlertSubscriptionCreated) GetPayload() *NewAlertSubscriptionCreatedBody {
	return o.Payload
}

func (o *NewAlertSubscriptionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NewAlertSubscriptionCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewAlertSubscriptionBadRequest creates a NewAlertSubscriptionBadRequest with default headers values
func NewNewAlertSubscriptionBadRequest() *NewAlertSubscriptionBadRequest {
	return &NewAlertSubscriptionBadRequest{}
}

/*
NewAlertSubscriptionBadRequest describes a response with status code 400, with default header values.

Validation Error
*/
type NewAlertSubscriptionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this new alert subscription bad request response has a 2xx status code
func (o *NewAlertSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this new alert subscription bad request response has a 3xx status code
func (o *NewAlertSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this new alert subscription bad request response has a 4xx status code
func (o *NewAlertSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this new alert subscription bad request response has a 5xx status code
func (o *NewAlertSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this new alert subscription bad request response a status code equal to that given
func (o *NewAlertSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the new alert subscription bad request response
func (o *NewAlertSubscriptionBadRequest) Code() int {
	return 400
}

func (o *NewAlertSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *NewAlertSubscriptionBadRequest) String() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *NewAlertSubscriptionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NewAlertSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewAlertSubscriptionConflict creates a NewAlertSubscriptionConflict with default headers values
func NewNewAlertSubscriptionConflict() *NewAlertSubscriptionConflict {
	return &NewAlertSubscriptionConflict{}
}

/*
NewAlertSubscriptionConflict describes a response with status code 409, with default header values.

Duplicate subscription
*/
type NewAlertSubscriptionConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this new alert subscription conflict response has a 2xx status code
func (o *NewAlertSubscriptionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this new alert subscription conflict response has a 3xx status code
func (o *NewAlertSubscriptionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this new alert subscription conflict response has a 4xx status code
func (o *NewAlertSubscriptionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this new alert subscription conflict response has a 5xx status code
func (o *NewAlertSubscriptionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this new alert subscription conflict response a status code equal to that given
func (o *NewAlertSubscriptionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the new alert subscription conflict response
func (o *NewAlertSubscriptionConflict) Code() int {
	return 409
}

func (o *NewAlertSubscriptionConflict) Error() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionConflict  %+v", 409, o.Payload)
}

func (o *NewAlertSubscriptionConflict) String() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionConflict  %+v", 409, o.Payload)
}

func (o *NewAlertSubscriptionConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NewAlertSubscriptionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewAlertSubscriptionUnprocessableEntity creates a NewAlertSubscriptionUnprocessableEntity with default headers values
func NewNewAlertSubscriptionUnprocessableEntity() *NewAlertSubscriptionUnprocessableEntity {
	return &NewAlertSubscriptionUnprocessableEntity{}
}

/*
NewAlertSubscriptionUnprocessableEntity describes a response with status code 422, with default header values.

Missing namespace and slack channel in shield
*/
type NewAlertSubscriptionUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this new alert subscription unprocessable entity response has a 2xx status code
func (o *NewAlertSubscriptionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this new alert subscription unprocessable entity response has a 3xx status code
func (o *NewAlertSubscriptionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this new alert subscription unprocessable entity response has a 4xx status code
func (o *NewAlertSubscriptionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this new alert subscription unprocessable entity response has a 5xx status code
func (o *NewAlertSubscriptionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this new alert subscription unprocessable entity response a status code equal to that given
func (o *NewAlertSubscriptionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the new alert subscription unprocessable entity response
func (o *NewAlertSubscriptionUnprocessableEntity) Code() int {
	return 422
}

func (o *NewAlertSubscriptionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *NewAlertSubscriptionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *NewAlertSubscriptionUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NewAlertSubscriptionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewAlertSubscriptionInternalServerError creates a NewAlertSubscriptionInternalServerError with default headers values
func NewNewAlertSubscriptionInternalServerError() *NewAlertSubscriptionInternalServerError {
	return &NewAlertSubscriptionInternalServerError{}
}

/*
NewAlertSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal Error
*/
type NewAlertSubscriptionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this new alert subscription internal server error response has a 2xx status code
func (o *NewAlertSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this new alert subscription internal server error response has a 3xx status code
func (o *NewAlertSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this new alert subscription internal server error response has a 4xx status code
func (o *NewAlertSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this new alert subscription internal server error response has a 5xx status code
func (o *NewAlertSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this new alert subscription internal server error response a status code equal to that given
func (o *NewAlertSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the new alert subscription internal server error response
func (o *NewAlertSubscriptionInternalServerError) Code() int {
	return 500
}

func (o *NewAlertSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *NewAlertSubscriptionInternalServerError) String() string {
	return fmt.Sprintf("[POST /dex/subscriptions][%d] newAlertSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *NewAlertSubscriptionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NewAlertSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NewAlertSubscriptionCreatedBody new alert subscription created body
swagger:model NewAlertSubscriptionCreatedBody
*/
type NewAlertSubscriptionCreatedBody struct {

	// subscription
	Subscription *models.Subscription `json:"subscription,omitempty"`
}

// Validate validates this new alert subscription created body
func (o *NewAlertSubscriptionCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NewAlertSubscriptionCreatedBody) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(o.Subscription) { // not required
		return nil
	}

	if o.Subscription != nil {
		if err := o.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAlertSubscriptionCreated" + "." + "subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAlertSubscriptionCreated" + "." + "subscription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this new alert subscription created body based on the context it is used
func (o *NewAlertSubscriptionCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NewAlertSubscriptionCreatedBody) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if o.Subscription != nil {

		if swag.IsZero(o.Subscription) { // not required
			return nil
		}

		if err := o.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newAlertSubscriptionCreated" + "." + "subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newAlertSubscriptionCreated" + "." + "subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NewAlertSubscriptionCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NewAlertSubscriptionCreatedBody) UnmarshalBinary(b []byte) error {
	var res NewAlertSubscriptionCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
