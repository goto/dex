// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	storage "cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"
)

// ObjectIterator is an autogenerated mock type for the ObjectIterator type
type ObjectIterator struct {
	mock.Mock
}

type ObjectIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectIterator) EXPECT() *ObjectIterator_Expecter {
	return &ObjectIterator_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with given fields:
func (_m *ObjectIterator) Next() (*storage.ObjectAttrs, error) {
	ret := _m.Called()

	var r0 *storage.ObjectAttrs
	var r1 error
	if rf, ok := ret.Get(0).(func() (*storage.ObjectAttrs, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *storage.ObjectAttrs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type ObjectIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *ObjectIterator_Expecter) Next() *ObjectIterator_Next_Call {
	return &ObjectIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *ObjectIterator_Next_Call) Run(run func()) *ObjectIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ObjectIterator_Next_Call) Return(_a0 *storage.ObjectAttrs, _a1 error) *ObjectIterator_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ObjectIterator_Next_Call) RunAndReturn(run func() (*storage.ObjectAttrs, error)) *ObjectIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewObjectIterator creates a new instance of ObjectIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectIterator {
	mock := &ObjectIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
