// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	shieldv1beta1 "buf.build/gen/go/gotocompany/proton/protocolbuffers/go/gotocompany/shield/v1beta1"
)

// ShieldServiceClient is an autogenerated mock type for the ShieldServiceClient type
type ShieldServiceClient struct {
	mock.Mock
}

// CheckResourcePermission provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CheckResourcePermission(ctx context.Context, in *shieldv1beta1.CheckResourcePermissionRequest, opts ...grpc.CallOption) (*shieldv1beta1.CheckResourcePermissionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CheckResourcePermissionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CheckResourcePermissionRequest, ...grpc.CallOption) *shieldv1beta1.CheckResourcePermissionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CheckResourcePermissionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CheckResourcePermissionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAction provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateAction(ctx context.Context, in *shieldv1beta1.CreateActionRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateActionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateActionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateActionRequest, ...grpc.CallOption) *shieldv1beta1.CreateActionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateActionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateActionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateGroup(ctx context.Context, in *shieldv1beta1.CreateGroupRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateGroupRequest, ...grpc.CallOption) *shieldv1beta1.CreateGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMetadataKey provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateMetadataKey(ctx context.Context, in *shieldv1beta1.CreateMetadataKeyRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateMetadataKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateMetadataKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateMetadataKeyRequest, ...grpc.CallOption) *shieldv1beta1.CreateMetadataKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateMetadataKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateMetadataKeyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamespace provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateNamespace(ctx context.Context, in *shieldv1beta1.CreateNamespaceRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateNamespaceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateNamespaceRequest, ...grpc.CallOption) *shieldv1beta1.CreateNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateNamespaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateOrganization(ctx context.Context, in *shieldv1beta1.CreateOrganizationRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateOrganizationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateOrganizationRequest, ...grpc.CallOption) *shieldv1beta1.CreateOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateOrganizationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreatePolicy(ctx context.Context, in *shieldv1beta1.CreatePolicyRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreatePolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreatePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreatePolicyRequest, ...grpc.CallOption) *shieldv1beta1.CreatePolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreatePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreatePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateProject(ctx context.Context, in *shieldv1beta1.CreateProjectRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateProjectRequest, ...grpc.CallOption) *shieldv1beta1.CreateProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelation provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateRelation(ctx context.Context, in *shieldv1beta1.CreateRelationRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateRelationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateRelationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateRelationRequest, ...grpc.CallOption) *shieldv1beta1.CreateRelationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateRelationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateRelationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResource provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateResource(ctx context.Context, in *shieldv1beta1.CreateResourceRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateResourceRequest, ...grpc.CallOption) *shieldv1beta1.CreateResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateRole(ctx context.Context, in *shieldv1beta1.CreateRoleRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateRoleRequest, ...grpc.CallOption) *shieldv1beta1.CreateRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) CreateUser(ctx context.Context, in *shieldv1beta1.CreateUserRequest, opts ...grpc.CallOption) (*shieldv1beta1.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.CreateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.CreateUserRequest, ...grpc.CallOption) *shieldv1beta1.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.CreateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelation provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) DeleteRelation(ctx context.Context, in *shieldv1beta1.DeleteRelationRequest, opts ...grpc.CallOption) (*shieldv1beta1.DeleteRelationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.DeleteRelationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.DeleteRelationRequest, ...grpc.CallOption) *shieldv1beta1.DeleteRelationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.DeleteRelationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.DeleteRelationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUser provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetCurrentUser(ctx context.Context, in *shieldv1beta1.GetCurrentUserRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetCurrentUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetCurrentUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetCurrentUserRequest, ...grpc.CallOption) *shieldv1beta1.GetCurrentUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetCurrentUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetCurrentUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetGroup(ctx context.Context, in *shieldv1beta1.GetGroupRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetGroupRequest, ...grpc.CallOption) *shieldv1beta1.GetGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetNamespace(ctx context.Context, in *shieldv1beta1.GetNamespaceRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetNamespaceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetNamespaceRequest, ...grpc.CallOption) *shieldv1beta1.GetNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetNamespaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganization provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetOrganization(ctx context.Context, in *shieldv1beta1.GetOrganizationRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetOrganizationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetOrganizationRequest, ...grpc.CallOption) *shieldv1beta1.GetOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetOrganizationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetProject(ctx context.Context, in *shieldv1beta1.GetProjectRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetProjectRequest, ...grpc.CallOption) *shieldv1beta1.GetProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelation provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetRelation(ctx context.Context, in *shieldv1beta1.GetRelationRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetRelationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetRelationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetRelationRequest, ...grpc.CallOption) *shieldv1beta1.GetRelationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetRelationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetRelationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResource provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetResource(ctx context.Context, in *shieldv1beta1.GetResourceRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetResourceRequest, ...grpc.CallOption) *shieldv1beta1.GetResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) GetUser(ctx context.Context, in *shieldv1beta1.GetUserRequest, opts ...grpc.CallOption) (*shieldv1beta1.GetUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.GetUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.GetUserRequest, ...grpc.CallOption) *shieldv1beta1.GetUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.GetUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActions provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListActions(ctx context.Context, in *shieldv1beta1.ListActionsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListActionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListActionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListActionsRequest, ...grpc.CallOption) *shieldv1beta1.ListActionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListActionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListActionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupRelations provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListGroupRelations(ctx context.Context, in *shieldv1beta1.ListGroupRelationsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListGroupRelationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListGroupRelationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListGroupRelationsRequest, ...grpc.CallOption) *shieldv1beta1.ListGroupRelationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListGroupRelationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListGroupRelationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListGroups(ctx context.Context, in *shieldv1beta1.ListGroupsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListGroupsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListGroupsRequest, ...grpc.CallOption) *shieldv1beta1.ListGroupsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListGroupsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListNamespaces(ctx context.Context, in *shieldv1beta1.ListNamespacesRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListNamespacesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListNamespacesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListNamespacesRequest, ...grpc.CallOption) *shieldv1beta1.ListNamespacesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListNamespacesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListNamespacesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationAdmins provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListOrganizationAdmins(ctx context.Context, in *shieldv1beta1.ListOrganizationAdminsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListOrganizationAdminsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListOrganizationAdminsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListOrganizationAdminsRequest, ...grpc.CallOption) *shieldv1beta1.ListOrganizationAdminsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListOrganizationAdminsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListOrganizationAdminsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizations provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListOrganizations(ctx context.Context, in *shieldv1beta1.ListOrganizationsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListOrganizationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListOrganizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListOrganizationsRequest, ...grpc.CallOption) *shieldv1beta1.ListOrganizationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListOrganizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListOrganizationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListPolicies(ctx context.Context, in *shieldv1beta1.ListPoliciesRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListPoliciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListPoliciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListPoliciesRequest, ...grpc.CallOption) *shieldv1beta1.ListPoliciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListPoliciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListPoliciesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectAdmins provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListProjectAdmins(ctx context.Context, in *shieldv1beta1.ListProjectAdminsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListProjectAdminsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListProjectAdminsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListProjectAdminsRequest, ...grpc.CallOption) *shieldv1beta1.ListProjectAdminsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListProjectAdminsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListProjectAdminsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListProjects(ctx context.Context, in *shieldv1beta1.ListProjectsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListProjectsRequest, ...grpc.CallOption) *shieldv1beta1.ListProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListProjectsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelations provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListRelations(ctx context.Context, in *shieldv1beta1.ListRelationsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListRelationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListRelationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListRelationsRequest, ...grpc.CallOption) *shieldv1beta1.ListRelationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListRelationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListRelationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListResources(ctx context.Context, in *shieldv1beta1.ListResourcesRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListResourcesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListResourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListResourcesRequest, ...grpc.CallOption) *shieldv1beta1.ListResourcesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListResourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListResourcesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListRoles(ctx context.Context, in *shieldv1beta1.ListRolesRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListRolesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListRolesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListRolesRequest, ...grpc.CallOption) *shieldv1beta1.ListRolesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListRolesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListRolesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserGroups provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListUserGroups(ctx context.Context, in *shieldv1beta1.ListUserGroupsRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListUserGroupsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListUserGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListUserGroupsRequest, ...grpc.CallOption) *shieldv1beta1.ListUserGroupsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListUserGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListUserGroupsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) ListUsers(ctx context.Context, in *shieldv1beta1.ListUsersRequest, opts ...grpc.CallOption) (*shieldv1beta1.ListUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.ListUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.ListUsersRequest, ...grpc.CallOption) *shieldv1beta1.ListUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.ListUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.ListUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCurrentUser provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateCurrentUser(ctx context.Context, in *shieldv1beta1.UpdateCurrentUserRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateCurrentUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateCurrentUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateCurrentUserRequest, ...grpc.CallOption) *shieldv1beta1.UpdateCurrentUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateCurrentUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateCurrentUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateGroup(ctx context.Context, in *shieldv1beta1.UpdateGroupRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateGroupRequest, ...grpc.CallOption) *shieldv1beta1.UpdateGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamespace provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateNamespace(ctx context.Context, in *shieldv1beta1.UpdateNamespaceRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateNamespaceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateNamespaceRequest, ...grpc.CallOption) *shieldv1beta1.UpdateNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateNamespaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateOrganization(ctx context.Context, in *shieldv1beta1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateOrganizationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateOrganizationRequest, ...grpc.CallOption) *shieldv1beta1.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateOrganizationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateProject(ctx context.Context, in *shieldv1beta1.UpdateProjectRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateProjectRequest, ...grpc.CallOption) *shieldv1beta1.UpdateProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateResource(ctx context.Context, in *shieldv1beta1.UpdateResourceRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateResourceRequest, ...grpc.CallOption) *shieldv1beta1.UpdateResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *ShieldServiceClient) UpdateUser(ctx context.Context, in *shieldv1beta1.UpdateUserRequest, opts ...grpc.CallOption) (*shieldv1beta1.UpdateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shieldv1beta1.UpdateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *shieldv1beta1.UpdateUserRequest, ...grpc.CallOption) *shieldv1beta1.UpdateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shieldv1beta1.UpdateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shieldv1beta1.UpdateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
