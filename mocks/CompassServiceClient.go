// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	compassv1beta1 "buf.build/gen/go/gotocompany/proton/protocolbuffers/go/gotocompany/compass/v1beta1"

	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CompassServiceClient is an autogenerated mock type for the CompassServiceClient type
type CompassServiceClient struct {
	mock.Mock
}

// CreateAssetProbe provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) CreateAssetProbe(ctx context.Context, in *compassv1beta1.CreateAssetProbeRequest, opts ...grpc.CallOption) (*compassv1beta1.CreateAssetProbeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.CreateAssetProbeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateAssetProbeRequest, ...grpc.CallOption) (*compassv1beta1.CreateAssetProbeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateAssetProbeRequest, ...grpc.CallOption) *compassv1beta1.CreateAssetProbeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.CreateAssetProbeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.CreateAssetProbeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComment provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) CreateComment(ctx context.Context, in *compassv1beta1.CreateCommentRequest, opts ...grpc.CallOption) (*compassv1beta1.CreateCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.CreateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateCommentRequest, ...grpc.CallOption) (*compassv1beta1.CreateCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateCommentRequest, ...grpc.CallOption) *compassv1beta1.CreateCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.CreateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.CreateCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiscussion provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) CreateDiscussion(ctx context.Context, in *compassv1beta1.CreateDiscussionRequest, opts ...grpc.CallOption) (*compassv1beta1.CreateDiscussionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.CreateDiscussionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateDiscussionRequest, ...grpc.CallOption) (*compassv1beta1.CreateDiscussionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateDiscussionRequest, ...grpc.CallOption) *compassv1beta1.CreateDiscussionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.CreateDiscussionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.CreateDiscussionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) CreateTagAsset(ctx context.Context, in *compassv1beta1.CreateTagAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.CreateTagAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.CreateTagAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateTagAssetRequest, ...grpc.CallOption) (*compassv1beta1.CreateTagAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateTagAssetRequest, ...grpc.CallOption) *compassv1beta1.CreateTagAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.CreateTagAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.CreateTagAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagTemplate provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) CreateTagTemplate(ctx context.Context, in *compassv1beta1.CreateTagTemplateRequest, opts ...grpc.CallOption) (*compassv1beta1.CreateTagTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.CreateTagTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateTagTemplateRequest, ...grpc.CallOption) (*compassv1beta1.CreateTagTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.CreateTagTemplateRequest, ...grpc.CallOption) *compassv1beta1.CreateTagTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.CreateTagTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.CreateTagTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) DeleteAsset(ctx context.Context, in *compassv1beta1.DeleteAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.DeleteAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.DeleteAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteAssetRequest, ...grpc.CallOption) (*compassv1beta1.DeleteAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteAssetRequest, ...grpc.CallOption) *compassv1beta1.DeleteAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.DeleteAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.DeleteAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) DeleteComment(ctx context.Context, in *compassv1beta1.DeleteCommentRequest, opts ...grpc.CallOption) (*compassv1beta1.DeleteCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.DeleteCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteCommentRequest, ...grpc.CallOption) (*compassv1beta1.DeleteCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteCommentRequest, ...grpc.CallOption) *compassv1beta1.DeleteCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.DeleteCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.DeleteCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) DeleteTagAsset(ctx context.Context, in *compassv1beta1.DeleteTagAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.DeleteTagAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.DeleteTagAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteTagAssetRequest, ...grpc.CallOption) (*compassv1beta1.DeleteTagAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteTagAssetRequest, ...grpc.CallOption) *compassv1beta1.DeleteTagAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.DeleteTagAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.DeleteTagAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagTemplate provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) DeleteTagTemplate(ctx context.Context, in *compassv1beta1.DeleteTagTemplateRequest, opts ...grpc.CallOption) (*compassv1beta1.DeleteTagTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.DeleteTagTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteTagTemplateRequest, ...grpc.CallOption) (*compassv1beta1.DeleteTagTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.DeleteTagTemplateRequest, ...grpc.CallOption) *compassv1beta1.DeleteTagTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.DeleteTagTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.DeleteTagTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAssets provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAllAssets(ctx context.Context, in *compassv1beta1.GetAllAssetsRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAllAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAllAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllAssetsRequest, ...grpc.CallOption) (*compassv1beta1.GetAllAssetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllAssetsRequest, ...grpc.CallOption) *compassv1beta1.GetAllAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAllAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAllAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllComments provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAllComments(ctx context.Context, in *compassv1beta1.GetAllCommentsRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAllCommentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAllCommentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllCommentsRequest, ...grpc.CallOption) (*compassv1beta1.GetAllCommentsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllCommentsRequest, ...grpc.CallOption) *compassv1beta1.GetAllCommentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAllCommentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAllCommentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDiscussions provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAllDiscussions(ctx context.Context, in *compassv1beta1.GetAllDiscussionsRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAllDiscussionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAllDiscussionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllDiscussionsRequest, ...grpc.CallOption) (*compassv1beta1.GetAllDiscussionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllDiscussionsRequest, ...grpc.CallOption) *compassv1beta1.GetAllDiscussionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAllDiscussionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAllDiscussionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTagTemplates provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAllTagTemplates(ctx context.Context, in *compassv1beta1.GetAllTagTemplatesRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAllTagTemplatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAllTagTemplatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllTagTemplatesRequest, ...grpc.CallOption) (*compassv1beta1.GetAllTagTemplatesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllTagTemplatesRequest, ...grpc.CallOption) *compassv1beta1.GetAllTagTemplatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAllTagTemplatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAllTagTemplatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTagsByAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAllTagsByAsset(ctx context.Context, in *compassv1beta1.GetAllTagsByAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAllTagsByAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAllTagsByAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllTagsByAssetRequest, ...grpc.CallOption) (*compassv1beta1.GetAllTagsByAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllTagsByAssetRequest, ...grpc.CallOption) *compassv1beta1.GetAllTagsByAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAllTagsByAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAllTagsByAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTypes provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAllTypes(ctx context.Context, in *compassv1beta1.GetAllTypesRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAllTypesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAllTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllTypesRequest, ...grpc.CallOption) (*compassv1beta1.GetAllTypesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAllTypesRequest, ...grpc.CallOption) *compassv1beta1.GetAllTypesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAllTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAllTypesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetByID provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAssetByID(ctx context.Context, in *compassv1beta1.GetAssetByIDRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAssetByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAssetByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetByIDRequest, ...grpc.CallOption) (*compassv1beta1.GetAssetByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetByIDRequest, ...grpc.CallOption) *compassv1beta1.GetAssetByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAssetByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAssetByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetByVersion provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAssetByVersion(ctx context.Context, in *compassv1beta1.GetAssetByVersionRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAssetByVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAssetByVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetByVersionRequest, ...grpc.CallOption) (*compassv1beta1.GetAssetByVersionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetByVersionRequest, ...grpc.CallOption) *compassv1beta1.GetAssetByVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAssetByVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAssetByVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetStargazers provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAssetStargazers(ctx context.Context, in *compassv1beta1.GetAssetStargazersRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAssetStargazersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAssetStargazersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetStargazersRequest, ...grpc.CallOption) (*compassv1beta1.GetAssetStargazersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetStargazersRequest, ...grpc.CallOption) *compassv1beta1.GetAssetStargazersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAssetStargazersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAssetStargazersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetVersionHistory provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetAssetVersionHistory(ctx context.Context, in *compassv1beta1.GetAssetVersionHistoryRequest, opts ...grpc.CallOption) (*compassv1beta1.GetAssetVersionHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetAssetVersionHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetVersionHistoryRequest, ...grpc.CallOption) (*compassv1beta1.GetAssetVersionHistoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetAssetVersionHistoryRequest, ...grpc.CallOption) *compassv1beta1.GetAssetVersionHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetAssetVersionHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetAssetVersionHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComment provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetComment(ctx context.Context, in *compassv1beta1.GetCommentRequest, opts ...grpc.CallOption) (*compassv1beta1.GetCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetCommentRequest, ...grpc.CallOption) (*compassv1beta1.GetCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetCommentRequest, ...grpc.CallOption) *compassv1beta1.GetCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussion provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetDiscussion(ctx context.Context, in *compassv1beta1.GetDiscussionRequest, opts ...grpc.CallOption) (*compassv1beta1.GetDiscussionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetDiscussionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetDiscussionRequest, ...grpc.CallOption) (*compassv1beta1.GetDiscussionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetDiscussionRequest, ...grpc.CallOption) *compassv1beta1.GetDiscussionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetDiscussionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetDiscussionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraph provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetGraph(ctx context.Context, in *compassv1beta1.GetGraphRequest, opts ...grpc.CallOption) (*compassv1beta1.GetGraphResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetGraphResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetGraphRequest, ...grpc.CallOption) (*compassv1beta1.GetGraphResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetGraphRequest, ...grpc.CallOption) *compassv1beta1.GetGraphResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetGraphResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetGraphRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyDiscussions provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetMyDiscussions(ctx context.Context, in *compassv1beta1.GetMyDiscussionsRequest, opts ...grpc.CallOption) (*compassv1beta1.GetMyDiscussionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetMyDiscussionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetMyDiscussionsRequest, ...grpc.CallOption) (*compassv1beta1.GetMyDiscussionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetMyDiscussionsRequest, ...grpc.CallOption) *compassv1beta1.GetMyDiscussionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetMyDiscussionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetMyDiscussionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyStarredAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetMyStarredAsset(ctx context.Context, in *compassv1beta1.GetMyStarredAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.GetMyStarredAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetMyStarredAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetMyStarredAssetRequest, ...grpc.CallOption) (*compassv1beta1.GetMyStarredAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetMyStarredAssetRequest, ...grpc.CallOption) *compassv1beta1.GetMyStarredAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetMyStarredAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetMyStarredAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyStarredAssets provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetMyStarredAssets(ctx context.Context, in *compassv1beta1.GetMyStarredAssetsRequest, opts ...grpc.CallOption) (*compassv1beta1.GetMyStarredAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetMyStarredAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetMyStarredAssetsRequest, ...grpc.CallOption) (*compassv1beta1.GetMyStarredAssetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetMyStarredAssetsRequest, ...grpc.CallOption) *compassv1beta1.GetMyStarredAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetMyStarredAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetMyStarredAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagByAssetAndTemplate provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetTagByAssetAndTemplate(ctx context.Context, in *compassv1beta1.GetTagByAssetAndTemplateRequest, opts ...grpc.CallOption) (*compassv1beta1.GetTagByAssetAndTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetTagByAssetAndTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetTagByAssetAndTemplateRequest, ...grpc.CallOption) (*compassv1beta1.GetTagByAssetAndTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetTagByAssetAndTemplateRequest, ...grpc.CallOption) *compassv1beta1.GetTagByAssetAndTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetTagByAssetAndTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetTagByAssetAndTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagTemplate provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetTagTemplate(ctx context.Context, in *compassv1beta1.GetTagTemplateRequest, opts ...grpc.CallOption) (*compassv1beta1.GetTagTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetTagTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetTagTemplateRequest, ...grpc.CallOption) (*compassv1beta1.GetTagTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetTagTemplateRequest, ...grpc.CallOption) *compassv1beta1.GetTagTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetTagTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetTagTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStarredAssets provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GetUserStarredAssets(ctx context.Context, in *compassv1beta1.GetUserStarredAssetsRequest, opts ...grpc.CallOption) (*compassv1beta1.GetUserStarredAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GetUserStarredAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetUserStarredAssetsRequest, ...grpc.CallOption) (*compassv1beta1.GetUserStarredAssetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GetUserStarredAssetsRequest, ...grpc.CallOption) *compassv1beta1.GetUserStarredAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GetUserStarredAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GetUserStarredAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupAssets provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) GroupAssets(ctx context.Context, in *compassv1beta1.GroupAssetsRequest, opts ...grpc.CallOption) (*compassv1beta1.GroupAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.GroupAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GroupAssetsRequest, ...grpc.CallOption) (*compassv1beta1.GroupAssetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.GroupAssetsRequest, ...grpc.CallOption) *compassv1beta1.GroupAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.GroupAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.GroupAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchDiscussion provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) PatchDiscussion(ctx context.Context, in *compassv1beta1.PatchDiscussionRequest, opts ...grpc.CallOption) (*compassv1beta1.PatchDiscussionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.PatchDiscussionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.PatchDiscussionRequest, ...grpc.CallOption) (*compassv1beta1.PatchDiscussionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.PatchDiscussionRequest, ...grpc.CallOption) *compassv1beta1.PatchDiscussionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.PatchDiscussionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.PatchDiscussionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAssets provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) SearchAssets(ctx context.Context, in *compassv1beta1.SearchAssetsRequest, opts ...grpc.CallOption) (*compassv1beta1.SearchAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.SearchAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.SearchAssetsRequest, ...grpc.CallOption) (*compassv1beta1.SearchAssetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.SearchAssetsRequest, ...grpc.CallOption) *compassv1beta1.SearchAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.SearchAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.SearchAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StarAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) StarAsset(ctx context.Context, in *compassv1beta1.StarAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.StarAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.StarAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.StarAssetRequest, ...grpc.CallOption) (*compassv1beta1.StarAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.StarAssetRequest, ...grpc.CallOption) *compassv1beta1.StarAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.StarAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.StarAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuggestAssets provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) SuggestAssets(ctx context.Context, in *compassv1beta1.SuggestAssetsRequest, opts ...grpc.CallOption) (*compassv1beta1.SuggestAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.SuggestAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.SuggestAssetsRequest, ...grpc.CallOption) (*compassv1beta1.SuggestAssetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.SuggestAssetsRequest, ...grpc.CallOption) *compassv1beta1.SuggestAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.SuggestAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.SuggestAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnstarAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) UnstarAsset(ctx context.Context, in *compassv1beta1.UnstarAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.UnstarAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.UnstarAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UnstarAssetRequest, ...grpc.CallOption) (*compassv1beta1.UnstarAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UnstarAssetRequest, ...grpc.CallOption) *compassv1beta1.UnstarAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.UnstarAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.UnstarAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) UpdateComment(ctx context.Context, in *compassv1beta1.UpdateCommentRequest, opts ...grpc.CallOption) (*compassv1beta1.UpdateCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.UpdateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpdateCommentRequest, ...grpc.CallOption) (*compassv1beta1.UpdateCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpdateCommentRequest, ...grpc.CallOption) *compassv1beta1.UpdateCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.UpdateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.UpdateCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTagAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) UpdateTagAsset(ctx context.Context, in *compassv1beta1.UpdateTagAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.UpdateTagAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.UpdateTagAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpdateTagAssetRequest, ...grpc.CallOption) (*compassv1beta1.UpdateTagAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpdateTagAssetRequest, ...grpc.CallOption) *compassv1beta1.UpdateTagAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.UpdateTagAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.UpdateTagAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTagTemplate provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) UpdateTagTemplate(ctx context.Context, in *compassv1beta1.UpdateTagTemplateRequest, opts ...grpc.CallOption) (*compassv1beta1.UpdateTagTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.UpdateTagTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpdateTagTemplateRequest, ...grpc.CallOption) (*compassv1beta1.UpdateTagTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpdateTagTemplateRequest, ...grpc.CallOption) *compassv1beta1.UpdateTagTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.UpdateTagTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.UpdateTagTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) UpsertAsset(ctx context.Context, in *compassv1beta1.UpsertAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.UpsertAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.UpsertAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpsertAssetRequest, ...grpc.CallOption) (*compassv1beta1.UpsertAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpsertAssetRequest, ...grpc.CallOption) *compassv1beta1.UpsertAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.UpsertAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.UpsertAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPatchAsset provides a mock function with given fields: ctx, in, opts
func (_m *CompassServiceClient) UpsertPatchAsset(ctx context.Context, in *compassv1beta1.UpsertPatchAssetRequest, opts ...grpc.CallOption) (*compassv1beta1.UpsertPatchAssetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *compassv1beta1.UpsertPatchAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpsertPatchAssetRequest, ...grpc.CallOption) (*compassv1beta1.UpsertPatchAssetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compassv1beta1.UpsertPatchAssetRequest, ...grpc.CallOption) *compassv1beta1.UpsertPatchAssetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compassv1beta1.UpsertPatchAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compassv1beta1.UpsertPatchAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCompassServiceClient creates a new instance of CompassServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompassServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompassServiceClient {
	mock := &CompassServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
