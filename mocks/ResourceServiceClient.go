// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entropyv1beta1grpc "buf.build/gen/go/gotocompany/proton/grpc/go/gotocompany/entropy/v1beta1/entropyv1beta1grpc"
	entropyv1beta1 "buf.build/gen/go/gotocompany/proton/protocolbuffers/go/gotocompany/entropy/v1beta1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ResourceServiceClient is an autogenerated mock type for the ResourceServiceClient type
type ResourceServiceClient struct {
	mock.Mock
}

// ApplyAction provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) ApplyAction(ctx context.Context, in *entropyv1beta1.ApplyActionRequest, opts ...grpc.CallOption) (*entropyv1beta1.ApplyActionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.ApplyActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.ApplyActionRequest, ...grpc.CallOption) (*entropyv1beta1.ApplyActionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.ApplyActionRequest, ...grpc.CallOption) *entropyv1beta1.ApplyActionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.ApplyActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.ApplyActionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResource provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) CreateResource(ctx context.Context, in *entropyv1beta1.CreateResourceRequest, opts ...grpc.CallOption) (*entropyv1beta1.CreateResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.CreateResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.CreateResourceRequest, ...grpc.CallOption) (*entropyv1beta1.CreateResourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.CreateResourceRequest, ...grpc.CallOption) *entropyv1beta1.CreateResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.CreateResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.CreateResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) DeleteResource(ctx context.Context, in *entropyv1beta1.DeleteResourceRequest, opts ...grpc.CallOption) (*entropyv1beta1.DeleteResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.DeleteResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.DeleteResourceRequest, ...grpc.CallOption) (*entropyv1beta1.DeleteResourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.DeleteResourceRequest, ...grpc.CallOption) *entropyv1beta1.DeleteResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.DeleteResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.DeleteResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLog provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) GetLog(ctx context.Context, in *entropyv1beta1.GetLogRequest, opts ...grpc.CallOption) (entropyv1beta1grpc.ResourceService_GetLogClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 entropyv1beta1grpc.ResourceService_GetLogClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.GetLogRequest, ...grpc.CallOption) (entropyv1beta1grpc.ResourceService_GetLogClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.GetLogRequest, ...grpc.CallOption) entropyv1beta1grpc.ResourceService_GetLogClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entropyv1beta1grpc.ResourceService_GetLogClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.GetLogRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResource provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) GetResource(ctx context.Context, in *entropyv1beta1.GetResourceRequest, opts ...grpc.CallOption) (*entropyv1beta1.GetResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.GetResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.GetResourceRequest, ...grpc.CallOption) (*entropyv1beta1.GetResourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.GetResourceRequest, ...grpc.CallOption) *entropyv1beta1.GetResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.GetResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.GetResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceRevisions provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) GetResourceRevisions(ctx context.Context, in *entropyv1beta1.GetResourceRevisionsRequest, opts ...grpc.CallOption) (*entropyv1beta1.GetResourceRevisionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.GetResourceRevisionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.GetResourceRevisionsRequest, ...grpc.CallOption) (*entropyv1beta1.GetResourceRevisionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.GetResourceRevisionsRequest, ...grpc.CallOption) *entropyv1beta1.GetResourceRevisionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.GetResourceRevisionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.GetResourceRevisionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) ListResources(ctx context.Context, in *entropyv1beta1.ListResourcesRequest, opts ...grpc.CallOption) (*entropyv1beta1.ListResourcesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.ListResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.ListResourcesRequest, ...grpc.CallOption) (*entropyv1beta1.ListResourcesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.ListResourcesRequest, ...grpc.CallOption) *entropyv1beta1.ListResourcesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.ListResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.ListResourcesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) UpdateResource(ctx context.Context, in *entropyv1beta1.UpdateResourceRequest, opts ...grpc.CallOption) (*entropyv1beta1.UpdateResourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *entropyv1beta1.UpdateResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.UpdateResourceRequest, ...grpc.CallOption) (*entropyv1beta1.UpdateResourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entropyv1beta1.UpdateResourceRequest, ...grpc.CallOption) *entropyv1beta1.UpdateResourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entropyv1beta1.UpdateResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entropyv1beta1.UpdateResourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewResourceServiceClient creates a new instance of ResourceServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceServiceClient {
	mock := &ResourceServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
