// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	corev1beta1grpc "buf.build/gen/go/gotocompany/proton/grpc/go/gotocompany/optimus/core/v1beta1/corev1beta1grpc"
	corev1beta1 "buf.build/gen/go/gotocompany/proton/protocolbuffers/go/gotocompany/optimus/core/v1beta1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// JobSpecificationServiceClient is an autogenerated mock type for the JobSpecificationServiceClient type
type JobSpecificationServiceClient struct {
	mock.Mock
}

// AddJobSpecifications provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) AddJobSpecifications(ctx context.Context, in *corev1beta1.AddJobSpecificationsRequest, opts ...grpc.CallOption) (*corev1beta1.AddJobSpecificationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.AddJobSpecificationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.AddJobSpecificationsRequest, ...grpc.CallOption) (*corev1beta1.AddJobSpecificationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.AddJobSpecificationsRequest, ...grpc.CallOption) *corev1beta1.AddJobSpecificationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.AddJobSpecificationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.AddJobSpecificationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeJobNamespace provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) ChangeJobNamespace(ctx context.Context, in *corev1beta1.ChangeJobNamespaceRequest, opts ...grpc.CallOption) (*corev1beta1.ChangeJobNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.ChangeJobNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.ChangeJobNamespaceRequest, ...grpc.CallOption) (*corev1beta1.ChangeJobNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.ChangeJobNamespaceRequest, ...grpc.CallOption) *corev1beta1.ChangeJobNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.ChangeJobNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.ChangeJobNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckJobSpecification provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) CheckJobSpecification(ctx context.Context, in *corev1beta1.CheckJobSpecificationRequest, opts ...grpc.CallOption) (*corev1beta1.CheckJobSpecificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.CheckJobSpecificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.CheckJobSpecificationRequest, ...grpc.CallOption) (*corev1beta1.CheckJobSpecificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.CheckJobSpecificationRequest, ...grpc.CallOption) *corev1beta1.CheckJobSpecificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.CheckJobSpecificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.CheckJobSpecificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckJobSpecifications provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) CheckJobSpecifications(ctx context.Context, in *corev1beta1.CheckJobSpecificationsRequest, opts ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_CheckJobSpecificationsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 corev1beta1grpc.JobSpecificationService_CheckJobSpecificationsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.CheckJobSpecificationsRequest, ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_CheckJobSpecificationsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.CheckJobSpecificationsRequest, ...grpc.CallOption) corev1beta1grpc.JobSpecificationService_CheckJobSpecificationsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1beta1grpc.JobSpecificationService_CheckJobSpecificationsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.CheckJobSpecificationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobSpecification provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) CreateJobSpecification(ctx context.Context, in *corev1beta1.CreateJobSpecificationRequest, opts ...grpc.CallOption) (*corev1beta1.CreateJobSpecificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.CreateJobSpecificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.CreateJobSpecificationRequest, ...grpc.CallOption) (*corev1beta1.CreateJobSpecificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.CreateJobSpecificationRequest, ...grpc.CallOption) *corev1beta1.CreateJobSpecificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.CreateJobSpecificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.CreateJobSpecificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobSpecification provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) DeleteJobSpecification(ctx context.Context, in *corev1beta1.DeleteJobSpecificationRequest, opts ...grpc.CallOption) (*corev1beta1.DeleteJobSpecificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.DeleteJobSpecificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.DeleteJobSpecificationRequest, ...grpc.CallOption) (*corev1beta1.DeleteJobSpecificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.DeleteJobSpecificationRequest, ...grpc.CallOption) *corev1beta1.DeleteJobSpecificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.DeleteJobSpecificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.DeleteJobSpecificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployJobSpecification provides a mock function with given fields: ctx, opts
func (_m *JobSpecificationServiceClient) DeployJobSpecification(ctx context.Context, opts ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_DeployJobSpecificationClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 corev1beta1grpc.JobSpecificationService_DeployJobSpecificationClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_DeployJobSpecificationClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) corev1beta1grpc.JobSpecificationService_DeployJobSpecificationClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1beta1grpc.JobSpecificationService_DeployJobSpecificationClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployJobsStatus provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) GetDeployJobsStatus(ctx context.Context, in *corev1beta1.GetDeployJobsStatusRequest, opts ...grpc.CallOption) (*corev1beta1.GetDeployJobsStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.GetDeployJobsStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetDeployJobsStatusRequest, ...grpc.CallOption) (*corev1beta1.GetDeployJobsStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetDeployJobsStatusRequest, ...grpc.CallOption) *corev1beta1.GetDeployJobsStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.GetDeployJobsStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.GetDeployJobsStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobSpecification provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) GetJobSpecification(ctx context.Context, in *corev1beta1.GetJobSpecificationRequest, opts ...grpc.CallOption) (*corev1beta1.GetJobSpecificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.GetJobSpecificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetJobSpecificationRequest, ...grpc.CallOption) (*corev1beta1.GetJobSpecificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetJobSpecificationRequest, ...grpc.CallOption) *corev1beta1.GetJobSpecificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.GetJobSpecificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.GetJobSpecificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobSpecifications provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) GetJobSpecifications(ctx context.Context, in *corev1beta1.GetJobSpecificationsRequest, opts ...grpc.CallOption) (*corev1beta1.GetJobSpecificationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.GetJobSpecificationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetJobSpecificationsRequest, ...grpc.CallOption) (*corev1beta1.GetJobSpecificationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetJobSpecificationsRequest, ...grpc.CallOption) *corev1beta1.GetJobSpecificationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.GetJobSpecificationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.GetJobSpecificationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobTask provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) GetJobTask(ctx context.Context, in *corev1beta1.GetJobTaskRequest, opts ...grpc.CallOption) (*corev1beta1.GetJobTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.GetJobTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetJobTaskRequest, ...grpc.CallOption) (*corev1beta1.GetJobTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetJobTaskRequest, ...grpc.CallOption) *corev1beta1.GetJobTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.GetJobTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.GetJobTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWindow provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) GetWindow(ctx context.Context, in *corev1beta1.GetWindowRequest, opts ...grpc.CallOption) (*corev1beta1.GetWindowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.GetWindowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetWindowRequest, ...grpc.CallOption) (*corev1beta1.GetWindowResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.GetWindowRequest, ...grpc.CallOption) *corev1beta1.GetWindowResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.GetWindowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.GetWindowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobInspect provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) JobInspect(ctx context.Context, in *corev1beta1.JobInspectRequest, opts ...grpc.CallOption) (*corev1beta1.JobInspectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.JobInspectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.JobInspectRequest, ...grpc.CallOption) (*corev1beta1.JobInspectResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.JobInspectRequest, ...grpc.CallOption) *corev1beta1.JobInspectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.JobInspectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.JobInspectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobSpecification provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) ListJobSpecification(ctx context.Context, in *corev1beta1.ListJobSpecificationRequest, opts ...grpc.CallOption) (*corev1beta1.ListJobSpecificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.ListJobSpecificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.ListJobSpecificationRequest, ...grpc.CallOption) (*corev1beta1.ListJobSpecificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.ListJobSpecificationRequest, ...grpc.CallOption) *corev1beta1.ListJobSpecificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.ListJobSpecificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.ListJobSpecificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshJobs provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) RefreshJobs(ctx context.Context, in *corev1beta1.RefreshJobsRequest, opts ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_RefreshJobsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 corev1beta1grpc.JobSpecificationService_RefreshJobsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.RefreshJobsRequest, ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_RefreshJobsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.RefreshJobsRequest, ...grpc.CallOption) corev1beta1grpc.JobSpecificationService_RefreshJobsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1beta1grpc.JobSpecificationService_RefreshJobsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.RefreshJobsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceAllJobSpecifications provides a mock function with given fields: ctx, opts
func (_m *JobSpecificationServiceClient) ReplaceAllJobSpecifications(ctx context.Context, opts ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_ReplaceAllJobSpecificationsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 corev1beta1grpc.JobSpecificationService_ReplaceAllJobSpecificationsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (corev1beta1grpc.JobSpecificationService_ReplaceAllJobSpecificationsClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) corev1beta1grpc.JobSpecificationService_ReplaceAllJobSpecificationsClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1beta1grpc.JobSpecificationService_ReplaceAllJobSpecificationsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobSpecifications provides a mock function with given fields: ctx, in, opts
func (_m *JobSpecificationServiceClient) UpdateJobSpecifications(ctx context.Context, in *corev1beta1.UpdateJobSpecificationsRequest, opts ...grpc.CallOption) (*corev1beta1.UpdateJobSpecificationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1beta1.UpdateJobSpecificationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.UpdateJobSpecificationsRequest, ...grpc.CallOption) (*corev1beta1.UpdateJobSpecificationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1beta1.UpdateJobSpecificationsRequest, ...grpc.CallOption) *corev1beta1.UpdateJobSpecificationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1beta1.UpdateJobSpecificationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1beta1.UpdateJobSpecificationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJobSpecificationServiceClient creates a new instance of JobSpecificationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobSpecificationServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobSpecificationServiceClient {
	mock := &JobSpecificationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
