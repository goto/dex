// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	sirenv1beta1 "buf.build/gen/go/gotocompany/proton/protocolbuffers/go/gotocompany/siren/v1beta1"
)

// SirenServiceClient is an autogenerated mock type for the SirenServiceClient type
type SirenServiceClient struct {
	mock.Mock
}

// CreateAlerts provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateAlerts(ctx context.Context, in *sirenv1beta1.CreateAlertsRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateAlertsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateAlertsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateAlertsRequest, ...grpc.CallOption) (*sirenv1beta1.CreateAlertsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateAlertsRequest, ...grpc.CallOption) *sirenv1beta1.CreateAlertsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateAlertsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateAlertsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAlertsWithNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateAlertsWithNamespace(ctx context.Context, in *sirenv1beta1.CreateAlertsWithNamespaceRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateAlertsWithNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateAlertsWithNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateAlertsWithNamespaceRequest, ...grpc.CallOption) (*sirenv1beta1.CreateAlertsWithNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateAlertsWithNamespaceRequest, ...grpc.CallOption) *sirenv1beta1.CreateAlertsWithNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateAlertsWithNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateAlertsWithNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateNamespace(ctx context.Context, in *sirenv1beta1.CreateNamespaceRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateNamespaceRequest, ...grpc.CallOption) (*sirenv1beta1.CreateNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateNamespaceRequest, ...grpc.CallOption) *sirenv1beta1.CreateNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProvider provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateProvider(ctx context.Context, in *sirenv1beta1.CreateProviderRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateProviderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateProviderRequest, ...grpc.CallOption) (*sirenv1beta1.CreateProviderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateProviderRequest, ...grpc.CallOption) *sirenv1beta1.CreateProviderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceiver provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateReceiver(ctx context.Context, in *sirenv1beta1.CreateReceiverRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateReceiverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateReceiverResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateReceiverRequest, ...grpc.CallOption) (*sirenv1beta1.CreateReceiverResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateReceiverRequest, ...grpc.CallOption) *sirenv1beta1.CreateReceiverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateReceiverResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateReceiverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSilence provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateSilence(ctx context.Context, in *sirenv1beta1.CreateSilenceRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateSilenceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateSilenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateSilenceRequest, ...grpc.CallOption) (*sirenv1beta1.CreateSilenceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateSilenceRequest, ...grpc.CallOption) *sirenv1beta1.CreateSilenceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateSilenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateSilenceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) CreateSubscription(ctx context.Context, in *sirenv1beta1.CreateSubscriptionRequest, opts ...grpc.CallOption) (*sirenv1beta1.CreateSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.CreateSubscriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateSubscriptionRequest, ...grpc.CallOption) (*sirenv1beta1.CreateSubscriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.CreateSubscriptionRequest, ...grpc.CallOption) *sirenv1beta1.CreateSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.CreateSubscriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.CreateSubscriptionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) DeleteNamespace(ctx context.Context, in *sirenv1beta1.DeleteNamespaceRequest, opts ...grpc.CallOption) (*sirenv1beta1.DeleteNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.DeleteNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteNamespaceRequest, ...grpc.CallOption) (*sirenv1beta1.DeleteNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteNamespaceRequest, ...grpc.CallOption) *sirenv1beta1.DeleteNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.DeleteNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.DeleteNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvider provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) DeleteProvider(ctx context.Context, in *sirenv1beta1.DeleteProviderRequest, opts ...grpc.CallOption) (*sirenv1beta1.DeleteProviderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.DeleteProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteProviderRequest, ...grpc.CallOption) (*sirenv1beta1.DeleteProviderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteProviderRequest, ...grpc.CallOption) *sirenv1beta1.DeleteProviderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.DeleteProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.DeleteProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceiver provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) DeleteReceiver(ctx context.Context, in *sirenv1beta1.DeleteReceiverRequest, opts ...grpc.CallOption) (*sirenv1beta1.DeleteReceiverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.DeleteReceiverResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteReceiverRequest, ...grpc.CallOption) (*sirenv1beta1.DeleteReceiverResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteReceiverRequest, ...grpc.CallOption) *sirenv1beta1.DeleteReceiverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.DeleteReceiverResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.DeleteReceiverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) DeleteSubscription(ctx context.Context, in *sirenv1beta1.DeleteSubscriptionRequest, opts ...grpc.CallOption) (*sirenv1beta1.DeleteSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.DeleteSubscriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteSubscriptionRequest, ...grpc.CallOption) (*sirenv1beta1.DeleteSubscriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteSubscriptionRequest, ...grpc.CallOption) *sirenv1beta1.DeleteSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.DeleteSubscriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.DeleteSubscriptionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplate provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) DeleteTemplate(ctx context.Context, in *sirenv1beta1.DeleteTemplateRequest, opts ...grpc.CallOption) (*sirenv1beta1.DeleteTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.DeleteTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteTemplateRequest, ...grpc.CallOption) (*sirenv1beta1.DeleteTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.DeleteTemplateRequest, ...grpc.CallOption) *sirenv1beta1.DeleteTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.DeleteTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.DeleteTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpireSilence provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ExpireSilence(ctx context.Context, in *sirenv1beta1.ExpireSilenceRequest, opts ...grpc.CallOption) (*sirenv1beta1.ExpireSilenceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ExpireSilenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ExpireSilenceRequest, ...grpc.CallOption) (*sirenv1beta1.ExpireSilenceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ExpireSilenceRequest, ...grpc.CallOption) *sirenv1beta1.ExpireSilenceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ExpireSilenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ExpireSilenceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) GetNamespace(ctx context.Context, in *sirenv1beta1.GetNamespaceRequest, opts ...grpc.CallOption) (*sirenv1beta1.GetNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.GetNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetNamespaceRequest, ...grpc.CallOption) (*sirenv1beta1.GetNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetNamespaceRequest, ...grpc.CallOption) *sirenv1beta1.GetNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.GetNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.GetNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) GetProvider(ctx context.Context, in *sirenv1beta1.GetProviderRequest, opts ...grpc.CallOption) (*sirenv1beta1.GetProviderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.GetProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetProviderRequest, ...grpc.CallOption) (*sirenv1beta1.GetProviderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetProviderRequest, ...grpc.CallOption) *sirenv1beta1.GetProviderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.GetProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.GetProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiver provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) GetReceiver(ctx context.Context, in *sirenv1beta1.GetReceiverRequest, opts ...grpc.CallOption) (*sirenv1beta1.GetReceiverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.GetReceiverResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetReceiverRequest, ...grpc.CallOption) (*sirenv1beta1.GetReceiverResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetReceiverRequest, ...grpc.CallOption) *sirenv1beta1.GetReceiverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.GetReceiverResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.GetReceiverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSilence provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) GetSilence(ctx context.Context, in *sirenv1beta1.GetSilenceRequest, opts ...grpc.CallOption) (*sirenv1beta1.GetSilenceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.GetSilenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetSilenceRequest, ...grpc.CallOption) (*sirenv1beta1.GetSilenceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetSilenceRequest, ...grpc.CallOption) *sirenv1beta1.GetSilenceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.GetSilenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.GetSilenceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) GetSubscription(ctx context.Context, in *sirenv1beta1.GetSubscriptionRequest, opts ...grpc.CallOption) (*sirenv1beta1.GetSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.GetSubscriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetSubscriptionRequest, ...grpc.CallOption) (*sirenv1beta1.GetSubscriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetSubscriptionRequest, ...grpc.CallOption) *sirenv1beta1.GetSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.GetSubscriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.GetSubscriptionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplate provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) GetTemplate(ctx context.Context, in *sirenv1beta1.GetTemplateRequest, opts ...grpc.CallOption) (*sirenv1beta1.GetTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.GetTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetTemplateRequest, ...grpc.CallOption) (*sirenv1beta1.GetTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.GetTemplateRequest, ...grpc.CallOption) *sirenv1beta1.GetTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.GetTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.GetTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAlerts provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListAlerts(ctx context.Context, in *sirenv1beta1.ListAlertsRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListAlertsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListAlertsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListAlertsRequest, ...grpc.CallOption) (*sirenv1beta1.ListAlertsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListAlertsRequest, ...grpc.CallOption) *sirenv1beta1.ListAlertsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListAlertsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListAlertsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListNamespaces(ctx context.Context, in *sirenv1beta1.ListNamespacesRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListNamespacesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListNamespacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListNamespacesRequest, ...grpc.CallOption) (*sirenv1beta1.ListNamespacesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListNamespacesRequest, ...grpc.CallOption) *sirenv1beta1.ListNamespacesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListNamespacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListNamespacesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProviders provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListProviders(ctx context.Context, in *sirenv1beta1.ListProvidersRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListProvidersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListProvidersRequest, ...grpc.CallOption) (*sirenv1beta1.ListProvidersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListProvidersRequest, ...grpc.CallOption) *sirenv1beta1.ListProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListProvidersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListProvidersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivers provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListReceivers(ctx context.Context, in *sirenv1beta1.ListReceiversRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListReceiversResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListReceiversResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListReceiversRequest, ...grpc.CallOption) (*sirenv1beta1.ListReceiversResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListReceiversRequest, ...grpc.CallOption) *sirenv1beta1.ListReceiversResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListReceiversResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListReceiversRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListRules(ctx context.Context, in *sirenv1beta1.ListRulesRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListRulesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListRulesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListRulesRequest, ...grpc.CallOption) (*sirenv1beta1.ListRulesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListRulesRequest, ...grpc.CallOption) *sirenv1beta1.ListRulesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListRulesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListRulesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSilences provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListSilences(ctx context.Context, in *sirenv1beta1.ListSilencesRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListSilencesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListSilencesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListSilencesRequest, ...grpc.CallOption) (*sirenv1beta1.ListSilencesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListSilencesRequest, ...grpc.CallOption) *sirenv1beta1.ListSilencesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListSilencesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListSilencesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListSubscriptions(ctx context.Context, in *sirenv1beta1.ListSubscriptionsRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListSubscriptionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListSubscriptionsRequest, ...grpc.CallOption) (*sirenv1beta1.ListSubscriptionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListSubscriptionsRequest, ...grpc.CallOption) *sirenv1beta1.ListSubscriptionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListSubscriptionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplates provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) ListTemplates(ctx context.Context, in *sirenv1beta1.ListTemplatesRequest, opts ...grpc.CallOption) (*sirenv1beta1.ListTemplatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.ListTemplatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListTemplatesRequest, ...grpc.CallOption) (*sirenv1beta1.ListTemplatesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.ListTemplatesRequest, ...grpc.CallOption) *sirenv1beta1.ListTemplatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.ListTemplatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.ListTemplatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyReceiver provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) NotifyReceiver(ctx context.Context, in *sirenv1beta1.NotifyReceiverRequest, opts ...grpc.CallOption) (*sirenv1beta1.NotifyReceiverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.NotifyReceiverResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.NotifyReceiverRequest, ...grpc.CallOption) (*sirenv1beta1.NotifyReceiverResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.NotifyReceiverRequest, ...grpc.CallOption) *sirenv1beta1.NotifyReceiverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.NotifyReceiverResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.NotifyReceiverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderTemplate provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) RenderTemplate(ctx context.Context, in *sirenv1beta1.RenderTemplateRequest, opts ...grpc.CallOption) (*sirenv1beta1.RenderTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.RenderTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.RenderTemplateRequest, ...grpc.CallOption) (*sirenv1beta1.RenderTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.RenderTemplateRequest, ...grpc.CallOption) *sirenv1beta1.RenderTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.RenderTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.RenderTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) UpdateNamespace(ctx context.Context, in *sirenv1beta1.UpdateNamespaceRequest, opts ...grpc.CallOption) (*sirenv1beta1.UpdateNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.UpdateNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateNamespaceRequest, ...grpc.CallOption) (*sirenv1beta1.UpdateNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateNamespaceRequest, ...grpc.CallOption) *sirenv1beta1.UpdateNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.UpdateNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.UpdateNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvider provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) UpdateProvider(ctx context.Context, in *sirenv1beta1.UpdateProviderRequest, opts ...grpc.CallOption) (*sirenv1beta1.UpdateProviderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.UpdateProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateProviderRequest, ...grpc.CallOption) (*sirenv1beta1.UpdateProviderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateProviderRequest, ...grpc.CallOption) *sirenv1beta1.UpdateProviderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.UpdateProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.UpdateProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceiver provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) UpdateReceiver(ctx context.Context, in *sirenv1beta1.UpdateReceiverRequest, opts ...grpc.CallOption) (*sirenv1beta1.UpdateReceiverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.UpdateReceiverResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateReceiverRequest, ...grpc.CallOption) (*sirenv1beta1.UpdateReceiverResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateReceiverRequest, ...grpc.CallOption) *sirenv1beta1.UpdateReceiverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.UpdateReceiverResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.UpdateReceiverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRule provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) UpdateRule(ctx context.Context, in *sirenv1beta1.UpdateRuleRequest, opts ...grpc.CallOption) (*sirenv1beta1.UpdateRuleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.UpdateRuleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateRuleRequest, ...grpc.CallOption) (*sirenv1beta1.UpdateRuleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateRuleRequest, ...grpc.CallOption) *sirenv1beta1.UpdateRuleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.UpdateRuleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.UpdateRuleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) UpdateSubscription(ctx context.Context, in *sirenv1beta1.UpdateSubscriptionRequest, opts ...grpc.CallOption) (*sirenv1beta1.UpdateSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.UpdateSubscriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateSubscriptionRequest, ...grpc.CallOption) (*sirenv1beta1.UpdateSubscriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpdateSubscriptionRequest, ...grpc.CallOption) *sirenv1beta1.UpdateSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.UpdateSubscriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.UpdateSubscriptionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertTemplate provides a mock function with given fields: ctx, in, opts
func (_m *SirenServiceClient) UpsertTemplate(ctx context.Context, in *sirenv1beta1.UpsertTemplateRequest, opts ...grpc.CallOption) (*sirenv1beta1.UpsertTemplateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sirenv1beta1.UpsertTemplateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpsertTemplateRequest, ...grpc.CallOption) (*sirenv1beta1.UpsertTemplateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirenv1beta1.UpsertTemplateRequest, ...grpc.CallOption) *sirenv1beta1.UpsertTemplateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirenv1beta1.UpsertTemplateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirenv1beta1.UpsertTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSirenServiceClient creates a new instance of SirenServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSirenServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SirenServiceClient {
	mock := &SirenServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
